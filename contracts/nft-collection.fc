#include "stdlib.fc";
#include "params.fc";
#include "op-codes.fc";

;; NFT collection smart contract with whitelist, blacklist, and normal user restrictions

;; Storage scheme
;; storage#_ owner_address:MsgAddress next_item_index:uint64
;;           ^[collection_content:^Cell common_content:^Cell]
;;           nft_item_code:^Cell
;;           royalty_params:^RoyaltyParams
;;           ^users:(HashmapE 256 int) ;; 0 = normal, 1 = whitelisted, 2 = blacklisted
;;           = Storage;

(slice, int, cell, cell, cell, cell, slice) load_data() inline {
  var ds = get_data().begin_parse();
  return 
    (ds~load_msg_addr(), ;; owner_address
     ds~load_uint(64),   ;; next_item_index
     ds~load_ref(),      ;; content
     ds~load_ref(),      ;; nft_item_code
     ds~load_ref(),      ;; royalty_params
     ds~load_ref(),       ;; users
     ds~load_msg_addr()  ;; admin_address
     );
}

() save_data(slice owner_address, int next_item_index, cell content, cell nft_item_code, cell royalty_params, 
             cell users, slice admin_address) impure inline {
  set_data(begin_cell()
    .store_slice(owner_address)
    .store_uint(next_item_index, 64)
    .store_ref(content)
    .store_ref(nft_item_code)
    .store_ref(royalty_params)
    .store_ref(users)
    .store_slice(admin_address)
    .end_cell());
}

cell calculate_nft_item_state_init(int item_index, cell nft_item_code) {
  cell data = begin_cell().store_uint(item_index, 64).store_slice(my_address()).end_cell();
  return begin_cell().store_uint(0, 2).store_dict(nft_item_code).store_dict(data).store_uint(0, 1).end_cell();
}

slice calculate_nft_item_address(int wc, cell state_init) {
  return begin_cell().store_uint(4, 3)
                     .store_int(wc, 8)
                     .store_uint(cell_hash(state_init), 256)
                     .end_cell()
                     .begin_parse();
}

() deploy_nft_item(int item_index, cell nft_item_code, int amount, cell nft_content) impure {
  cell state_init = calculate_nft_item_state_init(item_index, nft_item_code);
  slice nft_address = calculate_nft_item_address(workchain(), state_init);
  var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(nft_address)
    .store_coins(amount)
    .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
    .store_ref(state_init)
    .store_ref(nft_content);
  send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}

() send_royalty_params(slice to_address, int query_id, slice data) impure inline {
  var msg = begin_cell()
    .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
    .store_slice(to_address)
    .store_coins(0)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(0x693d3950, 32) ;; op::report_royalty_params()
    .store_uint(query_id, 64)
    .store_slice(data);
  send_raw_message(msg.end_cell(), 64); ;; carry all the remaining value of the inbound message
}

int check_user_status(slice address, cell users) inline {
    (slice value, int found) = users.udict_get?(256, slice_hash(address));
    if (found) {
        return value~load_uint(2);
    } else {
        return 0; ;; New normal user if not found
    }
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    var (owner_address, next_item_index, content, nft_item_code, royalty_params, users, admin_address) = load_data();

    if (op == 0x693d3950) { ;; get_royalty_params()
        send_royalty_params(sender_address, query_id, royalty_params.begin_parse());
        return ();
    }

    if (op == 1) { ;; deploy new nft
      ;; int user_status = check_user_status(sender_address, users);
      ;; throw_if(403, user_status == 2); ;; Reject if blacklisted
      
      ;; if (user_status == 0) { ;; New normal user
      ;;     users~udict_set(256, slice_hash(sender_address), begin_cell().store_uint(0, 2).end_cell().begin_parse());
      ;; } elseif (user_status == 1) { ;; Whitelisted user, do nothing special
      ;; } else { ;; Normal user who has already minted
      ;;     throw(404); ;; Reject, as normal users can only mint once
      ;; }
      
      int item_index = in_msg_body~load_uint(64);
      throw_unless(402, item_index <= next_item_index);
      
      cell nft_content = in_msg_body~load_ref();
      deploy_nft_item(item_index, nft_item_code, 50000000, nft_content); ;; deploy with 0.05 TON
      
      if (item_index == next_item_index) {
        next_item_index += 1;
        save_data(owner_address, next_item_index, content, nft_item_code, royalty_params, users, admin_address);
      }
      return ();
    }
    
    ;; The following operations are only allowed for the owner
    throw_unless(401, equal_slices(sender_address, owner_address));

    if (op == 2) { ;; batch deploy of new nfts
      int counter = 0;
      cell deploy_list = in_msg_body~load_ref();
      do {
        var (item_index, item, f?) = deploy_list~udict::delete_get_min(64);
        if (f?) {
          counter += 1;
          if (counter >= 250) { ;; Limit due to limits of action list size
            throw(399);
          }

          throw_unless(403 + counter, item_index <= next_item_index);
          deploy_nft_item(item_index, nft_item_code, item~load_coins(), item~load_ref());
          if (item_index == next_item_index) {
            next_item_index += 1;
          }
        }
      } until ( ~ f?);
      save_data(owner_address, next_item_index, content, nft_item_code, royalty_params, users, admin_address);
      return ();
    }
    if (op == 3) { ;; change owner
      throw_unless(401, equal_slices(sender_address, admin_address) | (equal_slices(sender_address, owner_address)));
      slice new_owner = in_msg_body~load_msg_addr();
      save_data(new_owner, next_item_index, content, nft_item_code, royalty_params, users, admin_address);
      return ();
    }
    if (op == 4) { ;; change content
      throw_unless(401, equal_slices(sender_address, admin_address) | (equal_slices(sender_address, owner_address)));
      save_data(owner_address, next_item_index, in_msg_body~load_ref(), nft_item_code, in_msg_body~load_ref(), users,admin_address);
      return ();
    }
    if (op == 5) { ;; add to whitelist
      throw_unless(401, equal_slices(sender_address, admin_address) | (equal_slices(sender_address, owner_address)));
        slice addr = in_msg_body~load_msg_addr();
        users~udict_set(256, slice_hash(addr), begin_cell().store_uint(1, 2).end_cell().begin_parse());
        save_data(owner_address, next_item_index, content, nft_item_code, royalty_params, users, admin_address);
        return ();
    }
    if (op == 6) { ;; add to blacklist
      throw_unless(401, equal_slices(sender_address, admin_address) | (equal_slices(sender_address, owner_address)));
      slice addr = in_msg_body~load_msg_addr();
        users~udict_set(256, slice_hash(addr), begin_cell().store_uint(2, 2).end_cell().begin_parse());
        save_data(owner_address, next_item_index, content, nft_item_code, royalty_params, users, admin_address);
        return ();
    }
    throw(0xffff);
}

;; Get methods

(int, cell, slice) get_collection_data() method_id {
  (slice owner_address, int next_item_index, cell content, cell nft_item_code, cell royalty_params, cell users, slice admin_address) = load_data();
  slice cs = content.begin_parse();
  return (next_item_index, begin_cell().end_cell(), owner_address);
}

slice get_nft_address_by_index(int index) method_id {
    (slice owner_address, int next_item_index, cell content, cell nft_item_code, cell royalty_params, cell users, slice admin_address) = load_data();
    cell state_init = calculate_nft_item_state_init(index, nft_item_code);
    return calculate_nft_item_address(workchain(), state_init);
}

(int, int, slice) royalty_params() method_id {
    (slice owner_address, int next_item_index, cell content, cell nft_item_code, cell royalty_params, cell users, slice admin_address) = load_data();
     slice rs = royalty_params.begin_parse();
     return (rs~load_uint(16), rs~load_uint(16), rs~load_msg_addr());
}

cell get_nft_content(int index, cell individual_nft_content) method_id {
    (slice owner_address, int next_item_index, cell content, cell nft_item_code, cell royalty_params, cell users, slice admin_address) = load_data();
  slice cs = content.begin_parse();
  cs~load_ref();
  slice common_content = cs~load_ref().begin_parse();
  return (begin_cell()
                      .store_uint(1, 8) ;; offchain tag
                      .store_slice(common_content)
                      .store_ref(individual_nft_content)
          .end_cell());
}

int is_whitelisted(slice addr) method_id {
    (slice owner_address, int next_item_index, cell content, cell nft_item_code, cell royalty_params, cell users, slice admin_address) = load_data();
    (slice value, int found) = users.udict_get?(256, slice_hash(addr));
    if (found) {
        return value~load_uint(2) == 1;
    }
    return 0;
}

int is_blacklisted(slice addr) method_id {
    (slice owner_address, int next_item_index, cell content, cell nft_item_code, cell royalty_params, cell users, slice admin_address) = load_data();
    (slice value, int found) = users.udict_get?(256, slice_hash(addr));
    if (found) {
        return value~load_uint(2) == 2;
    }
    return 0;
}

int has_minted(slice addr) method_id {
    (slice owner_address, int next_item_index, cell content, cell nft_item_code, cell royalty_params, cell users, slice admin_address) = load_data();
    (slice value, int found) = users.udict_get?(256, slice_hash(addr));
    if (found) {
        return value~load_uint(2) == 0;
    }
    return 0;
}