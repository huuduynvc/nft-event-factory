#include "stdlib.fc";
#include "params.fc";

;; NFT Collection Factory Contract

() save_data(slice owner_address, cell nft_collection_code) impure inline {
    set_data(begin_cell()
        .store_slice(owner_address)
        .store_ref(nft_collection_code)
    .end_cell());
}

(slice, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_msg_addr(), ;; owner_address
        ds~load_ref()       ;; nft_collection_code
    );
}

slice calculate_collection_address(int wc, cell state_init) inline {
  return begin_cell().store_uint(4, 3)
                     .store_int(wc, 8)
                     .store_uint(cell_hash(state_init), 256)
                     .end_cell()
                     .begin_parse();
}

cell create_users_cell(cell whitelist, cell blacklist) {
    cell users = new_dict();
    
    ;; Process whitelist
    (int key, slice value, int found) = whitelist.udict_get_min?(256);
    while (found) {
        users~udict_set(256, key, begin_cell().store_uint(1, 2).end_cell().begin_parse());
        (key, value, found) = whitelist.udict_get_next?(256, key);
    }

    ;; Process blacklist
    (key, value, found) = blacklist.udict_get_min?(256);
    while (found) {
        users~udict_set(256, key, begin_cell().store_uint(2, 2).end_cell().begin_parse());
        (key, value, found) = blacklist.udict_get_next?(256, key);
    }

    return users;
}

() deploy_nft_collection(slice owner_address, cell nft_collection_code, cell nft_item_code, 
                         cell content, cell royalty_params, cell users, slice admin_address) impure {
    cell state_init = begin_cell()
        .store_uint(0, 2)
        .store_dict(nft_collection_code)
        .store_dict(begin_cell()
            .store_slice(owner_address)
            .store_uint(0, 32) ;; next_item_index
            .store_ref(content)
            .store_ref(nft_item_code)
            .store_ref(royalty_params)
            .store_ref(users)
            .store_slice(admin_address)
        .end_cell())
        .store_uint(0, 1)
    .end_cell();

    slice nft_collection_address = calculate_collection_address(0, state_init);
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(nft_collection_address)
        .store_coins(50000000) ;; 0.05 TON
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(state_init);
    send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);
    
    (slice owner_address, cell nft_collection_code) = load_data();
    
    if (op == 1) { ;; deploy new NFT collection
        cell nft_item_code = in_msg_body~load_ref();
        cell content = in_msg_body~load_ref();
        cell royalty_params = in_msg_body~load_ref();
        cell whitelist = in_msg_body~load_dict();
        cell blacklist = in_msg_body~load_dict();
        
        cell users = create_users_cell(whitelist, blacklist);
        
        deploy_nft_collection(sender_address, nft_collection_code, nft_item_code, content, royalty_params, users, owner_address);
        return ();
    }
    
    if (op == 2) { ;; change owner
        throw_unless(401, equal_slices(sender_address, owner_address));
        slice new_owner = in_msg_body~load_msg_addr();
        save_data(new_owner, nft_collection_code);
        return ();
    }
    
    throw(0xffff);
}

;; Get methods

slice get_owner_address() method_id {
    (slice owner_address, _) = load_data();
    return owner_address;
}